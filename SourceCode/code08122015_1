; SLIME 2013-06-26
CL-USER> (fact 100)

CL-USER> (fact 100)

93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
CL-USER> (time (fact 100))
Evaluation took:
  0.000 seconds of real time
  0.000077 seconds of total run time (0.000070 user, 0.000007 system)
  100.00% CPU
  62,042 processor cycles
  0 bytes consed
  
93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
CL-USER> (trace fact)
(FACT)
CL-USER> (fact 5)
  0: (FACT 5)
  0: FACT returned 120
120
CL-USER> (time (defparameter *r* (iota 10000)))

Evaluation took:
  0.001 seconds of real time
  0.000931 seconds of total run time (0.000751 user, 0.000180 system)
  100.00% CPU
  2,122,683 processor cycles
  327,680 bytes consed
  
*R*
CL-USER> (time (defparameter *r* (iota-q 10000)))
Evaluation took:
  0.001 seconds of real time
  0.000900 seconds of total run time (0.000726 user, 0.000174 system)
  100.00% CPU
  2,205,192 processor cycles
  491,520 bytes consed
  
*R*
CL-USER> (+ 1 2 3 4 5)
15
CL-USER> (funcall #'+ 1 2 3 4 5)
15
CL-USER> (funcall (lambda (x) (* x x x)) 9)
729
CL-USER> (funcall (complement #'<) 5 4)
T
CL-USER> (apply (complement #'<) '(5 4))
T
CL-USER> (apply (complement #'<) 4 '(5))
NIL
CL-USER> (apply (complement #'<) 5 '(4))
T
CL-USER> (reduce #'cons '(1 2 3 4))
(((1 . 2) . 3) . 4)
CL-USER> (reduce #'cons '(1 2 3 4) :from-end t)
(1 2 3 . 4)
CL-USER> (reduce #'cons '(1 2 3 4 nil) :from-end t)
(1 2 3 4)
CL-USER> (reduce #'cons '(1 2 3 4) :from-end t :inital-value nil)
; Evaluation aborted on #<SB-INT:SIMPLE-PROGRAM-ERROR "unknown &KEY argument: ~S" {100724B043}>.
CL-USER> (reduce #'cons '(1 2 3 4) :from-end t :initial-value nil)
(1 2 3 4)
CL-USER> (mapcar (lambda (x) (* x x) '( 1 2 3 4 5)))
; Evaluation aborted on #<SB-INT:SIMPLE-PROGRAM-ERROR "invalid number of arguments: ~S" {1002C233C3}>.
CL-USER> (mapcar (lambda (x) (* x x)) '( 1 2 3 4 5))
(1 4 9 16 25)
CL-USER> (mapcar (lambda (x y) (* x y)) '(1 2 3 4 5) '(9 8 7 4 5 6))
(9 16 21 16 25)
CL-USER> (mapcar (lambda (x y) (cons x y)) '(1 2 3 4 5) '(a b c d e))
((1 . A) (2 . B) (3 . C) (4 . D) (5 . E))
CL-USER> (mapcar #'+ '(1 2 3) '(4 5 6) '(7 8 9))
(12 15 18)
CL-USER> (mapcan (lambda (x) (list x (1+ x))) '(1 2 3))
(1 2 2 3 3 4)
CL-USER> (mapcar (lambda (x) (list x (1+ x))) '(1 2 3))
((1 2) (2 3) (3 4))
CL-USER> (defparameter *al* '((blue . bleu) (red . rouge)))
*AL*
CL-USER> *al*
((BLUE . BLEU) (RED . ROUGE))
CL-USER> (member 'rouge *al* :key #'car)
NIL
CL-USER> (member 'red *al* :key #'car)
((RED . ROUGE))
CL-USER> (assoc 'red *al*)
(RED . ROUGE)
CL-USER> (cdr (assoc 'red *al*))
ROUGE
CL-USER> (cdr (assoc 'yellow *al*))
NIL
CL-USER> (defparameter *chiffres* '(("un" . 1) ("deux" . 2)))
*CHIFFRES*
CL-USER> *chiffres*
(("un" . 1) ("deux" . 2))
CL-USER> (assoc "deux" *chiffres*)
NIL
CL-USER> (assoc "deux" *chiffres* :test #'equal)
("deux" . 2)
CL-USER> 